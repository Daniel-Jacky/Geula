import React, { useState, useEffect, useRef } from 'react';
import { Table, Button, Checkbox } from 'antd';
import { DownloadOutlined } from '@ant-design/icons';
import * as XLSX from 'xlsx';
import columns from './columns';
import ExpandedRow from './ExpandedRow';
import SearchFilters from './SearchFilters';
import { updateUser } from '../api';
import { HDate, HebrewCalendar } from 'hebcal';
import moment from 'moment';


const TableComponent = ({ people, setPeople, addNotification }) => {
  const [filteredPeople, setFilteredPeople] = useState(people);
  const [editingKey, setEditingKey] = useState(null);
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);
  const [selectAll, setSelectAll] = useState(false);
  
  // üìå –•—Ä–∞–Ω–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const notifiedUsersRef = useRef(new Set());

  useEffect(() => {
    const todayJewishDate = new HDate(); // –¢–µ–∫—É—â–∞—è –µ–≤—Ä–µ–π—Å–∫–∞—è –¥–∞—Ç–∞
  
    people.forEach((person) => {
      if (!person.birthDate || notifiedUsersRef.current.has(person.id)) return;
  
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –µ–≤—Ä–µ–π—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
      const jewishBirthDate = new HDate(moment(person.birthDate, 'YYYY-MM-DD').toDate());
  
      // –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –µ–≤—Ä–µ–π—Å–∫–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
      const jewishAge = todayJewishDate.getFullYear() - jewishBirthDate.getFullYear();
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–æ–≤–Ω–æ 12 –ª–µ—Ç (–ø–µ—Ä–µ–¥ –ë–∞—Ä-–ú–∏—Ü–≤–æ–π)
      if (jewishAge !== 12) return;
  
      // –î–∞—Ç–∞ –ë–∞—Ä-–ú–∏—Ü–≤—ã (—á–µ—Ä–µ–∑ 13 –ª–µ—Ç –ø–æ –µ–≤—Ä–µ–π—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é)
      const barMitzvahDate = new HDate(jewishBirthDate.getDate(), jewishBirthDate.getMonth(), jewishBirthDate.getFullYear() + 13);
  
      // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞ 6 –º–µ—Å—è—Ü–µ–≤ –¥–æ –ë–∞—Ä-–ú–∏—Ü–≤—ã)
      let notifyDateYear = barMitzvahDate.getFullYear();
      let notifyDateMonth = barMitzvahDate.getMonth() - 6;
  
      // –ï—Å–ª–∏ –º–µ—Å—è—Ü —Å—Ç–∞–ª < 1 (—è–Ω–≤–∞—Ä—è –Ω–µ –±—ã–≤–∞–µ—Ç –≤ –µ–≤—Ä–µ–π—Å–∫–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ), –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–¥
      if (notifyDateMonth < 1) {
        notifyDateYear -= 1;
        notifyDateMonth += 12; // –°–¥–≤–∏–≥–∞–µ–º –Ω–∞–∑–∞–¥ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤
        if (HebrewCalendar.isJewishLeapYear(notifyDateYear)) {
          notifyDateMonth += 1; // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –≥–æ–¥ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π, —É—á–∏—Ç—ã–≤–∞–µ–º 13-–π –º–µ—Å—è—Ü
        }
      }
  
      const notifyDate = new HDate(barMitzvahDate.getDate(), notifyDateMonth, notifyDateYear);
  debugger
      // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –µ–≤—Ä–µ–π—Å–∫–∞—è –¥–∞—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ –±–æ–ª—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (todayJewishDate >= notifyDate) {
        addNotification(
          `${person.firstName} –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –ë–∞—Ä-–ú–∏—Ü–≤—ã —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤!`
        );
        notifiedUsersRef.current.add(person.id);
      }
    });
  }, [people, addNotification]);
  
  const onSave = async (key) => {
    const updatedUser = people.find((p) => p.id === key);
    if (!updatedUser) return;

    try {
      await updateUser(updatedUser);
      setPeople([...people]);
      setEditingKey(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
    }
  };

  const onChange = (key, field, value) => {
    setPeople((prev) =>
      prev.map((item) => {
        if (item.id === key) {
          const updatedItem = { ...item };
          const keys = field.split('.');
          if (keys.length > 1) {
            updatedItem[keys[0]] = { ...updatedItem[keys[0]], [keys[1]]: value };
          } else {
            updatedItem[field] = value;
          }
          return updatedItem;
        }
        return item;
      })
    );
  };

  const onSelectAll = (checked) => {
    setSelectAll(checked);
    setSelectedRowKeys(checked ? filteredPeople.map((p) => p.id) : []);
  };

  const onSelectRow = (key, checked) => {
    setSelectedRowKeys((prev) =>
      checked ? [...prev, key] : prev.filter((id) => id !== key)
    );
  };

  const handleExport = () => {
    if (selectedRowKeys.length === 0) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.');
      return;
    }
    
    const selectedData = filteredPeople
      .filter((p) => selectedRowKeys.includes(p.id))
      .map(({ id, firstName, lastName, fatherName, birthDate, mobileNumber, email }) => ({
        '–ò–º—è': firstName,
        '–§–∞–º–∏–ª–∏—è': lastName,
        '–û—Ç—á–µ—Å—Ç–≤–æ': fatherName,
        '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è': birthDate,
        '–¢–µ–ª–µ—Ñ–æ–Ω': mobileNumber,
        'Email': email,
      }));

    const worksheet = XLSX.utils.json_to_sheet(selectedData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, '–î–∞–Ω–Ω—ã–µ');
    XLSX.writeFile(workbook, '–≤—ã–≥—Ä—É–∑–∫–∞.xlsx');
  };

  const modifiedColumns = [
    {
      title: <Checkbox checked={selectAll} onChange={(e) => onSelectAll(e.target.checked)} />, 
      dataIndex: 'select',
      render: (_, record) => (
        <Checkbox
          checked={selectedRowKeys.includes(record.id)}
          onChange={(e) => onSelectRow(record.id, e.target.checked)}
        />
      ),
    },
    ...columns({ editingKey, setEditingKey, onSave, onChange, people: people || [] }),
  ];

  return (
    <>
      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 16 }}>
        <SearchFilters people={people} setFilteredPeople={setFilteredPeople} />
        <Button type="primary" icon={<DownloadOutlined />} onClick={handleExport}>
          –í—ã–≥—Ä—É–∑–∏—Ç—å
        </Button>
      </div>
      <Table
        dataSource={filteredPeople.map((p, index) => ({ ...p, key: p.id || index }))}
        columns={modifiedColumns}
        rowKey="key"
        expandable={{
          expandedRowRender: (record) => (
            <ExpandedRow record={record} isEditing={editingKey === record.key} onChange={onChange} />
          ),
        }}
      />
    </>
  );
};

export default TableComponent;
